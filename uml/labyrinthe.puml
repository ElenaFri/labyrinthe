@startuml Labyrinthe

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

class Labyrinthe
{
    + {static} main(args: String[])
}

package views
{
	package helpers {
		'classe fournie :
		class ImageHelper {
			+ merge(backgroundPath : String, foregroundPaths : String[*]) : BufferedImage
			+ rotate(original : BufferedImage, angle : Double) : BufferedImage
			+ rotateClockwise(original : BufferedImage) : BufferedImage
			+ rotateCounterClockwise(original : BufferedImage) : BufferedImage
		}
	}

	interface TileComponent {
        + {abstract} render()
    }

    class GameView {
        + render()
    }

    class GameOverView extends GameView {
        + render()
        + displayGameOver()
    }

    class HandView {
        + render()
    }

    class PieceView {
        + render()
    }

    class TileRow {
        + addTile(position : Position)
        + render()
    }

    class TileView implements TileComponent {
        + render()
    }

    class FreeTileView extends TileView {
        + render()
    }

    class HallwayView extends TileRow {
        + render()
    }

    class GameboardView {
        + render()
        + addRow(row : TileRow)
        + addPiece(piece : PieceView)
    }
	
}

package controllers
{

   class GameboardController {
       + getAvailableMoves(playerId: Integer): List<Tile>
       - _freeTile : Tile
       + shiftRow(index : Integer, direction : String)
       + shiftColumn(index : Integer, direction : String)
       + rotateTile(tile : Tile, orientation : Integer)
   }
   class GameFacadeController {
       + checkObjectiveCompletion(playerId: Integer): Boolean
       + movePlayer(playerId: Integer, destination: Tile): Boolean
       + collectItem(playerId: Integer, itemId: Integer): Boolean
       + updateObjectives(playerId: Integer)
   }

   class UIController {
       - _view: GameView
       + handleTileClick(position: Position)
       + handleObjectiveFound(player: Player)
       + updateView(): void
       + displayGameOver(winner: Player)
   }
}

package models
{
    package observers {
        interface GameFacadeObserver {
            + updatePlayerPosition(newPosition : Position)
            + updatePlayerObjective(objective : Integer)
        }

        interface GameboardObserver {
            + updateGameboard(gameboard : Gameboard)
        }
    }

	package tiles {
		class TileFactory {
			+ « Create » TileFactory()
			+ createAngledTile() : Tile
			+ createStraightTile() : Tile
			+ createTShapedTile() : Tile
		}

		abstract class Tile {
			# _type : String
			# _hasTreasure : Boolean
			# _treasure : Integer[0..23]
			# _canMove : Boolean
			# _isOnBoard : Boolean
			# _orientation : Integer[0..3]
			+ « Create » Tile()
			+ « Create » Tile(position : Position)
			+ getType() : String
			'récupérer les voies de passage :
			+ getOpenSides() : Sides
			+ getTreasure() : Integer
			+ checkIfTreasure() : Integer
			+ checkIfMoves() : Boolean
			+ setTreasure(treasure : Integer)
			+ {abstract} initOrientation()
			+ {abstract} setOrientation(orientation : Integer)
			+ {abstract} setOpenSides()
		}
		class AngledTile extends Tile {
			+ « Create » AngledTile()
			+ initOrientation() {implements}
			+ setOrientation(orientation : Integer) {implements}
			+ setOpenSides() {implements}
		}
		class StraightTile extends Tile {
			+ « Create » StraightTile()
			+ initOrientation() {implements}
			+ setOrientation(orientation : Integer) {implements}
			+ setOpenSides() {implements}
		}
		class TShapedTile extends Tile {
			+ « Create » TShapedTile()
			+ initOrientation() {implements}
			+ setOrientation(orientation : Integer) {implements}
			+ setOpenSides() {implements}
		}
	}

	package geometry {
		class Sides {
			- _openSides : Boolean[*]
			+ « Create » Sides()
			+ getSides() : Boolean[*]
			+ setSide(i : Integer, isOpen : Boolean)
		}

		class Position {
			- _x: Integer[0..6]
			- _y: Integer[0..6]
			+ « Create » Position(x: Integer, y: Integer)
			+ getX() : Integer
			+ getY() : Integer
			+ setPosition(x: Integer, y: Integer)
		}
	}

	package game {


		class GameFacade {
            + « Create » GameFacade()
            'On instancie les cartes et on fait l'attribution ici
            + addGameFacadeObserver(observer : GameFacadeObserver)
            + notifyPlayerPositionChange(newPosition : Position)
            + notifyPlayerObjectiveChange(objective : Integer)
            + nextPlayer()
            - notifyCurrentPlayerChange()
            + getCurrentPlayer() : Player
            + getPlayer(index : Integer) : Player
            + deal()
		}

		class Gameboard {
            + « Create » Gameboard
			+ addGameboardObserver(observer : GameBoardObserver)
			- notifyGameboardChange()
			+ getFreeTile() : Tile
			+ setFreeTile(freeTile : Tile)
			- initializeBoard()
			- placeFixedTiles()
			- placeMovableTiles()
			- placeMovableTileAngled()
			- placeMovableTileTShaped()
			- placeMovableTileStraight()
			- placeMovableTile(Tile tile)
			'Et pour la tuile libre ? (-1, -1)
            + getTile(position : Position)
            - placeObjectives()
		}
		'class Hallway {}

		class Card {
		    - _treasure : Integer
		    ' si l'objectif est rempli
			- _isFound : Boolean
			' génération du trésor aléatoire, dans la limite des trésors encore disponibles
			+ « Create » Card(treasure : Integer)
			+ getTreasure() : Integer
			+ checkIfFound() : Boolean
			' Un trésor trouvé ne peut pas être re-caché, on ne peut donc pas remettre isFound à false :
			+ setFound()
			+ isBackCard() : Boolean
            + {static} createDeck(): Card[*])
		}

		class Player {
			- _id : Integer[0..3]
			- _name : String
			- _currentObjectiveIndex : Integer
			- _currentObjective()
			+ « Create » Player(id : Integer, name : String)
			+ getName() : String
			+ getCurrentTile() : Position
			+ getCards() : Card[*]
			+ setCurrentTile(x : Integer, y : Integer)
			+ setCards(Card[*])
			+ getCurrentObjective()
			+ completeCurrentObjective()
		}
    }

    package data {
		class ImageStore {
			'pour chaque tuile, ses positions :
			- _tileImages : BufferedImage[*][*]
			 'recto et verso de la carte, sans dessin :
			- _cardImages : BufferedImage[*]
			'à superposer avec les tuiles et les cartes :
			- _treasureImages : BufferedImage[*]
			'4 pions de couleurs différentes :
			- _pieceImages : BufferedImage[*]
			'zone joueur :
			- _handBackground : BufferedImage
			+ « Create » ImageStore()
			+ getTileImage(index : Integer, orientation : Integer, withTreasure : Boolean) : BufferedImage
			+ getCardImage(index : Integer, isOpen : Boolean) : BufferedImage
			+ getPieceImage(index : Integer) : BufferedImage
			+ getHandBackground() : BufferedImage
			+ getScreen(isRunning : Boolean) : BufferedImage
		}

		class Screen {
			- _mainScreen : BufferedImage
			- _gameoverScreen : BufferedImage
			+ « Create » Screen()
			'si le jeu est toujours en cours, retourner l'écran principal :
			+ getScreenImage(isRunning : Boolean) : BufferedImage
		}
	}
}

Labyrinthe ....> GameView
Labyrinthe ....> GameboardView
GameboardView ..> GameboardController
GameboardView ..> GameFacadeController
GameView "1" *--> "4\n - _playerCards" HandView
GameView ..> GameFacade
GameView ..> GameboardObserver
GameView ..> GameFacadeObserver
GameFacadeController "1" o--> "1\n - _gamefacade" GameFacade
GameboardController "1" o--> "1\n - _gameboard" Gameboard
'Gameboard "1" *--> "6\n _hallways" Hallway
Gameboard "1" *---> "1\n - _tileFactory" TileFactory
Player "1" *-> "6\n - _hand" Card
Player "1" o--> "1\n - _position" Position
GameFacade "1" *--> "4\n - _players" Player
GameFacade ..> Card
ImageStore "1" *--> "1\n - _screen" Screen
Tile "1" o-> "1\n # _position" Position
Tile "1" *-> "1\n # _openSides" Sides
TileFactory ..> AngledTile
TileFactory ..> StraightTile
TileFactory ..> TShapedTile
TileFactory ..> Tile
GameFacade "1" o--> "1\n - _observers" GameFacadeObserver
Gameboard "1" o--> "1\n - _observer" GameboardObserver
'GameboardController "1" *--> "1\n -_GameFacade" GameFacade
'CollectorObjectiveController "1" *-> "1\n - _GameFacade" GameFacade
UIController .> GameFacade
UIController "1" o--> "1\n - _gameView" GameView
GameView .> ImageHelper
TileRow .> TileComponent
GameboardView "1" *---> "6\n - _tileRows" TileRow
GameboardView "1" *---> "4\n - _pieces" PieceView
ImageHelper ..> ImageStore
UIController "1" o---> "1\n - _boardController" GameboardController
@enduml
