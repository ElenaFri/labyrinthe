@startuml Labyrinthe

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

class Labyrinthe
{
    + {static} main(args: String[])
}

package views
{
	package helpers {
		'classe fournie :
		class ImageHelper {
			+ merge(backgroundPath : String, foregroundPaths : String[*]) : BufferedImage
			+ rotate(original : BufferedImage, angle : Double) : BufferedImage
			+ rotateClockwise(original : BufferedImage) : BufferedImage
			+ rotateCounterClockwise(original : BufferedImage) : BufferedImage
		}
	}

	package ViewsForObservers{
	  class GameboardTextView{

               +<<create>> GameBoardTextView(gameboard: Gameboard)
               + update(updatedGameboard: Gameboard)
               + displayBoard()
               - formatTile(tile: Tile): String
	  }
	  class GameFacadeTextView{

              + <<create>> GameFacadeTextView(gameFacade: GameFacade)
              + displayGameState()
              - displayPlayers()
              + onCurrentPlayerChanged(currentPlayer: Player)
              + onPlayerPositionChanged(newPosition: Position)
              + onPlayerObjectiveChanged(objective: integer)

	  }
	}
	
}

package controllers
{

   class GameboardController {

          + <<create>> GameboardController(gameboard : Gameboard)
          + getAvailableMoves(position : Position) : Map<String, Boolean>
          + shiftRow(index : Integer, direction : Integer)
          + shiftColumn(index : Integer, direction : Integer)
          + rotateTile(tile: Tile, direction: integer)
   }
   class GameFacadeController {

          +<<create>> GameFacadeController(gameFacade:GameFacade)
          + getCurrentPlayerPosition() : Position
          + getCurrentPlayerObjective() : String
          + notifyPlayerPosition(position : Position)
          + notifyPlayerObjective(objective: integer)
          + nextPlayer()
          + getCurrentPlayer() : Player

   }

   class UIController {
       - _view: GameView
       + handleTileClick(position: Position)
       + handleObjectiveFound(player: Player)
       + updateView(): void
       + displayGameOver(winner: Player)
   }
}

package models
{
    package observers {
        interface GameFacadeObserver {
            +UpdateCurrentPlayerChanged( currentPlayer : Player);
            +UpdatePlayerPositionChanged(newPosition : Position );
           + UpdatePlayerObjectiveChanged(objective: integer);
        }

        interface GameboardObserver {
            + updateGameboard(gameboard : Gameboard)
        }
    }

	package tiles {
		class TileFactory {
			+ « Create » TileFactory()
			+ createAngledTile() : Tile
			+ createStraightTile() : Tile
			+ createTShapedTile() : Tile
		}

		abstract class Tile {
			# _type : String
			# _hasTreasure : Boolean
			# _treasure : Integer[0..23]
			# _canMove : Boolean
			# _isOnBoard : Boolean
			# _orientation : Integer[0..3]
			+ « Create » Tile()
			+ « Create » Tile(position : Position)
			+ getType() : String
			'récupérer les voies de passage :
			+ getOpenSides() : Sides
			+ getTreasure() : Integer
			+ checkIfTreasure() : Integer
			+ checkIfMoves() : Boolean
			+ setTreasure(treasure : Integer)
			+ {abstract} initOrientation()
			+ {abstract} setOrientation(orientation : Integer)
			+ {abstract} setOpenSides()
		}
		class AngledTile extends Tile {
			+ « Create » AngledTile()
			+ initOrientation() {implements}
			+ setOrientation(orientation : Integer) {implements}
			+ setOpenSides() {implements}
		}
		class StraightTile extends Tile {
			+ « Create » StraightTile()
			+ initOrientation() {implements}
			+ setOrientation(orientation : Integer) {implements}
			+ setOpenSides() {implements}
		}
		class TShapedTile extends Tile {
			+ « Create » TShapedTile()
			+ initOrientation() {implements}
			+ setOrientation(orientation : Integer) {implements}
			+ setOpenSides() {implements}
		}
	}

	package geometry {
		class Sides {
			- _openSides : Boolean[*]
			+ « Create » Sides()
			+ getSides() : Boolean[*]
			+ setSide(i : Integer, isOpen : Boolean)
		}

		class Position {
			- _x: Integer[0..6]
			- _y: Integer[0..6]
			+ « Create » Position(x: Integer, y: Integer)
			+ getX() : Integer
			+ getY() : Integer
			+ setPosition(x: Integer, y: Integer)
		}
	}

	package game {


		class GameFacade {

               -  _currentPlayerIndex:integer
               + <<create>> GameFacade()
               + addGameFacadeObserver(gameFacadeObserver:GameFacadeObserver)
               + PlayernextObjective()
               + movePlayer(position :Position)
               + notifyPlayerPositionChange(position :Position)
               + notifyPlayerObjectiveChange(index : Integer)
               + nextPlayer()
               + notifyCurrentPlayerChange()
               + getCurrentPlayer() : Player
               + get_players() : Player[]
               + deal()
               + getPlayer(index : Integer)) : Player
		}

		class Gameboard {
               -  _tiles:Tile[][]
               -  random:Random
               +<<create>> Gameboard()
               + addGameboardObserver(GameBoardObserver)
               + notifyGameboardChange()
               + getFreeTile() : Tile
               + setFreeTile(tile: Tile))
               - initializeBoard()
               - placeFixedTiles()
               - placeMovableTiles()
               - placeMovableTileAngled()
               - placeMovableTileTShaped()
               - placeMovableTileStraight()
               - placeMovableTile(tile:Tile)
               + getTile(position : Position) : Tile
               - placeObjectives()
               + checkNeighbors(position: Position) : Map<String, Boolean>
               - canConnect((tile1: Tile, (tile2: Tile, (index : Integer) : boolean
		}
		'class Hallway {}

		class Card {
		    - _treasure : Integer
		    ' si l'objectif est rempli
			- _isFound : Boolean
			' génération du trésor aléatoire, dans la limite des trésors encore disponibles
			+ « Create » Card(treasure : Integer)
			+ getTreasure() : Integer
			+ checkIfFound() : Boolean
			' Un trésor trouvé ne peut pas être re-caché, on ne peut donc pas remettre isFound à false :
			+ setFound()
			+ isBackCard() : Boolean
            + {static} createDeck(): Card[*])
		}

		class Player {
			        - _id: integer[[0..3]
                    - _name: String

                    - _currentObjectiveIndex: integer
                    + <<create>> Player(id: integer, name: String)
                    + getName(): String
                    + get_currentObjectiveIndex(): integer
                    + getCurrentTile(): Position
                    + getCards(): Card[]
                    + setCurrentTile(position: Position)
                    + setCards(cards: Card[])
                    + getCurrentObjective(): Card
                    + completeCurrentObjective()
		}
    }

    package data {
		class ImageStore {
			'pour chaque tuile, ses positions :
			- _tileImages : BufferedImage[*][*]
			 'recto et verso de la carte, sans dessin :
			- _cardImages : BufferedImage[*]
			'à superposer avec les tuiles et les cartes :
			- _treasureImages : BufferedImage[*]
			'4 pions de couleurs différentes :
			- _pieceImages : BufferedImage[*]
			'zone joueur :
			- _handBackground : BufferedImage
			+ « Create » ImageStore()
			+ getTileImage(index : Integer, orientation : Integer, withTreasure : Boolean) : BufferedImage
			+ getCardImage(index : Integer, isOpen : Boolean) : BufferedImage
			+ getPieceImage(index : Integer) : BufferedImage
			+ getHandBackground() : BufferedImage
			+ getScreen(isRunning : Boolean) : BufferedImage
		}

		class Screen {
			- _mainScreen : BufferedImage
			- _gameoverScreen : BufferedImage
			+ « Create » Screen()
			'si le jeu est toujours en cours, retourner l'écran principal :
			+ getScreenImage(isRunning : Boolean) : BufferedImage
		}
	}
}

Labyrinthe ...> GameView
Labyrinthe ..> GameboardView
GameboardView ..> GameboardController
GameView "1" *--> "4\n - _playerCards" HandView
'GameView ..> GameFacade
GameView ..> GameboardObserver
GameView ..> GameFacadeObserver
GameFacadeController "1" o----> "1\n - _gamefacade" GameFacade
GameFacadeController ..> Position
GameboardController "1" o--> "1\n - _gameboard" Gameboard
GameboardController ..> Position
GameboardController ..> Tile
'Gameboard "1" *---> "6\n _hallways" Hallway
Gameboard "1" *--> "1\n - _tileFactory" TileFactory
Gameboard "1" *--> "1\n - _freetile" Tile
Player "1" *-> "6\n - _cards" Card
Player "1" o----> "1\n - _currentTile" Position
GameFacade "1" *--> "4\n - _players" Player
GameFacade ..> Card
GameFacade ..> Position
ImageStore "1" *--> "1\n - _screen" Screen
Tile "1" o-> "1\n # _position" Position
Tile "1" *--> "1\n # _openSides" Sides
TileFactory ..> AngledTile
TileFactory ..> StraightTile
TileFactory ..> TShapedTile
TileFactory ..> Tile
GameFacade "1" o-> "1\n - _gamefacadeobservers" GameFacadeObserver
Gameboard "1" o--> "1\n - _gameboardobservers" GameboardObserver
UIController .> GameFacade
UIController "1" o--> "1\n - _gameView" GameView
GameView .> ImageHelper
TileRow .> TileComponent

GameboardView "1" *---> "6\n - _tileRows" TileRow
GameView "1" *-> "4\n - _pieces" PieceView
ImageHelper ..> ImageStore
UIController "1" o--> "1\n - _boardController" GameboardController
GameBoardTextView ..|> GameBoardObserver
GameFacadeTextView ..|> GameFacadeObserver
GameboardTextView "1" o--> "1\n - _gameboard" Gameboard
GameFacadeTextView "1" o--> "1\n - _gamefacade" GameFacade
@enduml
