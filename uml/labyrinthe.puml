@startuml Labyrinthe

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

class Labyrinthe
{
    + {static} main(args: String[])
}

package views
{
	package helpers {
		'classe fournie :
		class ImageHelper {
			+ merge(backgroundPath : String, foregroundPaths : String[*]) : BufferedImage
			+ rotate(original : BufferedImage, angle : Double) : BufferedImage
			+ rotateClockwise(original : BufferedImage) : BufferedImage
			+ rotateCounterClockwise(original : BufferedImage) : BufferedImage
		}
	}
}

package controllers
{

}

package models
{
	package tiles {
		class TileFactory {
			+ « Create » Tile()
			+ « Create » Tile(pos : Position)
			+ createAngledTile() : Tile
			+ createStraightTile() : Tile
			+ createTShapedTile() : Tile
		}

		abstract class Tile {
			# _type : String
			# _hasTreasure : Boolean
			# _treasure : Integer[0..23]
			# _canMove : Boolean
			'récupérer les voies de passage :
			+ getOpenSides() : Sides
			+ {abstract}setOrientation()
		}
		class AngledTile extends Tile {
			- _orientation : Integer[0..3]
			+ « Create » AngledTile()
			+ setOrientation() {implements}
		}
		class StraightTile extends Tile {
			- _orientation : Integer[0,1]
			+ « Create » StraightTile()
			+ setOrientation() {implements}
		}
		class TShapedTile extends Tile {
			- _orientation : Integer[0..3]
			+ « Create » TShapedTile()
			+ setOrientation() {implements}
		}
	}

	package geometry {
		class Sides {
			- _openSides : Boolean[*]
			+ « Create » Sides()
			+ getSides() : Boolean[*]
			+ setSide(i : Integer, isOpen : Boolean)
		}

		class Position {
			- _x: Integer[0..6]
			- _y: Integer[0..6]
			+ « Create » Position(x: Integer, y: Integer)
			+ getX() : Integer
			+ getY() : Integer
			+ setPosition(x: Integer, y: Integer)
		}
	}

	package game {
		class GameSession {}
		class Gameboard {}
		'class Hallway {}
		class Card {
			- _isFound : Boolean
		}
		class Player {
			- _id : Integer[0..3]
			- _name : String
			- _piece : Piece
		}
		class Piece {
		}
    }

    package data {
		class ImageStore {
			'pour chaque tuile, ses positions :
			- _tileImages : BufferedImage[*][*]
			 'recto et verso de la carte, sans dessin :
			- _cardImages : BufferedImage[*]
			'à superposer avec les tuiles et les cartes :
			- _treasureImages : BufferedImage[*]
			'4 pions de couleurs différentes :
			- _pieceImages : BufferedImage[*]
			'zone joueur :
			- _handBackground : BufferedImage
			+ « Create » ImageStore()
			+ getTileImage(index : Integer, orientation : Integer, withTreasure : Boolean) : BufferedImage
			+ getCardImage(index : Integer, isOpen : Boolean) : BufferedImage
			+ getPieceImage(index : Integer) : BufferedImage
			+ getHandBackground() : BufferedImage
			+ getScreen(isRunning : Boolean) : BufferedImage
		}

		class Screen {
			- _mainScreen : BufferedImage
			- _gameoverScreen : BufferedImage
			+ « Create » Screen()
			'si le jeu est toujours en cours, retourner l'écran principal :
			+ getScreenImage(isRunning : Boolean) : BufferedImage
		}
	}
}

Labyrinthe ..> views
controllers ...> models
views ....> ImageStore
views ....> GameSession
views .> controllers
'Gameboard "1" *--> "6\n _hallways" Hallway
Gameboard "1" *---> "7\n _tiles" Tile
'Hallway "1" *--> "7\n _tiles_aligned" Tile
Player "1" o--> "6\n _hand" Card
Player "1" *--> "1\n _piece" Piece
Piece "1" *--> "1\n _position" Tile
GameSession "1" *--> "4\n _players" Player
GameSession "1" *--> "1\n _gameboard" Gameboard
ImageStore "1" *--> "1\n _screen" Screen
Tile "1" o-> "1\n # _position" Position
Tile "1" *-> "1\n # _openSides" Sides
TileFactory ..> AngledTile
TileFactory ..> StraightTile
TileFactory ..> TShapedTile
TileFactory ..> Tile
@enduml
